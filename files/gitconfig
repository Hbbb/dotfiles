[user]
	name = Harrison
	email = hborges005@gmail.com
[core]
  excludesfile = ~/.gitignore_global
  pager = diff-so-fancy | less --tabs=2 -RFX
  editor = vim --noplugin
[color]
  diff = auto
  status = auto
  branch = auto
  ui = true
[color "diff"]
  meta = yellow
[branch]
  autosetupmerge = true
[push]
  default = simple
[merge]
	tool = opendiff
[diff]
  tool = opendiff
[filter "lfs"]
  clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
	process = git-lfs filter-process
  required = true
[alias]
  lg = log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit
  st = status
  co = checkout
  copysha = !git rev-parse HEAD | pbcopy # won't work in linux

  # Get the current branch name (not so useful in itself, but used in
  # other aliases)
  branch-name = "!git rev-parse --abbrev-ref HEAD"

  # Push the current branch to the remote "origin", and set it to track
  # the upstream branch
  publish = "!git push -u origin $(git branch-name)"

  # Delete the remote version of the current branch
  unpublish = "!git push origin :$(git branch-name)"

  # Fire up your difftool with all the changes that
  # are on the current branch.
  code-review = difftool origin/master...

  # Given a merge commit, find the span of commits that exist(ed) on that
  # branch. Again, not so useful in itself, but used by other aliases.
  merge-span = "!f() { echo $(git log -1 $2 --merges --pretty=format:%P | cut -d' ' -f1)$1$(git log -1 $2 --merges --pretty=format:%P | cut -d' ' -f2); }; f"
  # Find the commits that were introduced by a merge
  merge-log = "!git log `git merge-span .. $1`"
  # Show the changes that were introduced by a merge
  merge-diff = "!git diff `git merge-span ... $1`"
  # As above, but in your difftool
  merge-difftool = "!git difftool `git merge-span ... $1`"


